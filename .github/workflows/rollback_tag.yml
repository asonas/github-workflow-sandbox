name: Create Rollback Tag

on:
  workflow_dispatch:
    inputs:
      rollback_to_tag:
        description: "Tag to roll back to (e.g., v2024.12.9)"
        required: true

jobs:
  create-rollback-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Get the latest release
        id: get-latest-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -w "%{http_code}" -o curl_output.txt \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest)
          http_status=${response: -3}
          if [ "$http_status" -ne 200 ]; then
            echo "Failed to fetch latest release. HTTP status: $http_status"
            cat curl_output.txt
            exit 1
          fi
          tag_name=$(cat curl_output.txt | jq -r '.tag_name // empty')
          echo "latest_tag=$tag_name" >> $GITHUB_ENV

      - name: Calculate next tag
        id: calculate-next-tag
        run: |
          latest_tag="${{ env.latest_tag }}"

          if [[ "$latest_tag" =~ ^v([0-9]{4})\.([0-9]{2})\.([0-9]+)$ ]]; then
            current_year=$(date +"%Y")
            current_month=$(date +"%m")
            tag_year=${BASH_REMATCH[1]}
            tag_month=${BASH_REMATCH[2]}
            tag_number=${BASH_REMATCH[3]}

            # 年と月が一致する場合は番号をインクリメント
            if [[ "$tag_year" -eq "$current_year" && "$tag_month" -eq "$current_month" ]]; then
              next_number=$((tag_number + 1))
            else
              # 年または月が異なる場合は番号をリセット
              next_number=0
            fi
            next_tag="v${current_year}.${current_month}.$next_number"
          else
            echo "Error: latest_tag format is invalid!" >&2
            exit 1
          fi

          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Get commit SHA for rollback tag
        id: get-rollback-sha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          rollback_to_tag="${{ github.event.inputs.rollback_to_tag }}"
          response=$(curl -s -H "Accept: application/vnd.github+json" \
                           -H "Authorization: Bearer $GITHUB_TOKEN" \
                           https://api.github.com/repos/${{ github.repository }}/git/ref/tags/$rollback_to_tag)
          commit_sha=$(echo "$response" | jq -r '.object.sha')
          if [ "$commit_sha" == "null" ]; then
            echo "Failed to fetch commit SHA for tag $rollback_to_tag"
            exit 1
          fi
          echo "rollback_commit_sha=$commit_sha" >> $GITHUB_ENV

      - name: Create rollback tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_TAG: ${{ env.next_tag }}
          ROLLBACK_COMMIT_SHA: ${{ env.rollback_commit_sha }}
        run: |
          tag_object_response=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag": "'${NEXT_TAG}'",
              "message": "Rollback to '${ROLLBACK_COMMIT_SHA}'",
              "object": "'${ROLLBACK_COMMIT_SHA}'",
              "type": "commit"
            }' \
            https://api.github.com/repos/${{ github.repository }}/git/tags)

          tag_object_sha=$(echo "$tag_object_response" | jq -r '.sha')

          ref_create_response=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "refs/tags/'${NEXT_TAG}'",
              "sha": "'${tag_object_sha}'"
            }' \
            https://api.github.com/repos/${{ github.repository }}/git/refs)

          echo "Created rollback tag: ${NEXT_TAG}"

      - name: Create or Update 'latest' Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LATEST_TAG: latest
          ROLLBACK_COMMIT_SHA: ${{ env.rollback_commit_sha }}
        run: |
          ref_response=$(curl -s -H "Accept: application/vnd.github+json" \
                               -H "Authorization: Bearer $GITHUB_TOKEN" \
                               https://api.github.com/repos/${{ github.repository }}/git/ref/tags/${LATEST_TAG})

          if echo "$ref_response" | jq -e . >/dev/null 2>&1; then
            echo "Reference 'refs/tags/latest' exists. Deleting..."
            delete_response=$(curl -s -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${LATEST_TAG})
            echo "$delete_response"
          fi

          tag_object_response=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag": "'${LATEST_TAG}'",
              "message": "This tag points to the latest release (rollback)",
              "object": "'${ROLLBACK_COMMIT_SHA}'",
              "type": "commit"
            }' \
            https://api.github.com/repos/${{ github.repository }}/git/tags)

          tag_object_sha=$(echo "$tag_object_response" | jq -r '.sha')

          # Create a reference pointing to the tag object
          ref_create_response=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "refs/tags/'${LATEST_TAG}'",
              "sha": "'${tag_object_sha}'"
            }' \
            https://api.github.com/repos/${{ github.repository }}/git/refs)

          echo "Updated 'latest' tag to point to rollback commit: ${ROLLBACK_COMMIT_SHA}"
