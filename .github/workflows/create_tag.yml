name: Create Tag and Release

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Get the latest release
        id: get-latest-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Accept: application/vnd.github+json" \
                           -H "Authorization: Bearer $GITHUB_TOKEN" \
                           https://api.github.com/repos/${{ github.repository }}/releases/latest)
          tag_name=$(echo "$response" | jq -r '.tag_name // empty')
          echo "latest_tag=$tag_name" >> $GITHUB_ENV

      - name: Calculate next tag
        id: calculate-next-tag
        run: |
          latest_tag="${{ env.latest_tag }}"
          if [[ -z "$latest_tag" ]]; then
            echo "Error: No latest tag found and no default value provided." >&2
            exit 1
          fi

          if [[ "$latest_tag" =~ ^v([0-9]{4})\.([0-9]{2})\.([0-9]+)$ ]]; then
            current_year=${BASH_REMATCH[1]}
            current_month=${BASH_REMATCH[2]}
            tag_number=${BASH_REMATCH[3]}
            next_number=$((tag_number + 1))
            next_tag="v${current_year}.${current_month}.$next_number"
          else
            echo "Error: latest_tag format is invalid!" >&2
            exit 1
          fi

          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Generate release notes
        id: generate-release-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "'${{ env.next_tag }}'",
              "previous_tag_name": "'${{ env.latest_tag }}'"
            }' \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes)
          release_notes=$(echo "$response" | jq -r '.body')

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NOTES: ${{ env.RELEASE_NOTES }}
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "'${{ env.next_tag }}'",
              "target_commitish": "main",
              "name": "'${{ env.next_tag }}'",
              "body": "'"${RELEASE_NOTES}"'",
              "draft": false,
              "prerelease": false
            }' \
            https://api.github.com/repos/${{ github.repository }}/releases
